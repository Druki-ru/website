{"version":3,"sources":["druki/assets/js/throttle.es6.js"],"names":["Drupal","throttle","func","wait","timer","args","setTimeout","apply","this"],"mappings":"AA4BAA,OAAOC,SAAW,SAAUC,EAAMC,EAAO,KACvC,IAAIC,EAAQ,KAEZ,OAAO,YAAaC,GACJ,OAAVD,IACFA,EAAQE,YAAW,KACjBJ,EAAKK,MAAMC,KAAMH,GACjBD,EAAQ,OACPD","file":"throttle.js","sourcesContent":["/**\n * @file\n * Simple throttle implementation for Drupal namespace.\n */\n\n/**\n * Limits the invocations of a function in a given time frame.\n *\n * Creates a throttled function that only invokes func at most once per every\n * wait milliseconds. The throttled function comes with a cancel method to\n * cancel delayed func invocations and a flush method to immediately invoke\n * them. Provide options to indicate whether func should be invoked on the\n * leading and/or trailing edge of the wait timeout. The func is invoked with\n * the last arguments provided to the throttled function. Subsequent calls to\n * the throttled function return the result of the last func invocation.\n *\n * @see https://lodash.com/docs/4.17.11#throttle\n * @see https://css-tricks.com/debouncing-throttling-explained-examples/\n *\n * @param {function} func\n *   The function to be invoked.\n * @param {number} wait\n *   The time period within which the callback function should only be\n *   invoked once.\n *\n * @return {function}\n *   The throttle function.\n */\nDrupal.throttle = function (func, wait = 100) {\n  let timer = null;\n\n  return function (...args) {\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func.apply(this, args);\n        timer = null;\n      }, wait);\n    }\n  };\n};\n"]}