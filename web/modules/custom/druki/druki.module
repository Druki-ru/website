<?php

/**
 * @file
 * Primary module hooks for Druki module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\image\Entity\ImageStyle;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;

/**
 * Implements hook_preprocess_HOOK().
 */
function druki_preprocess_toolbar(array &$variables): void {
  $variables['#attached']['library'][] = 'druki/druki.toolbar';
}

/**
 * Implements hook_cron().
 */
function druki_cron(): void {
  \Drupal::service('druki.cron.check_drupal_releases')->process();
}

/**
 * Implements hook_preprocess_HOOK() for 'page--front.html.twig'.
 */
function druki_preprocess_page__front(array &$variables): void {
  $variables['drupal_versions'] = [
    '#theme' => 'druki_drupal_versions',
  ];
}

/**
 * Implements hook_theme().
 */
function druki_theme(): array {
  $file = 'druki.theme.inc';

  return [
    'druki_drupal_versions' => [
      'variables' => [],
      'file' => $file,
    ],
    'druki_header_search' => [
      'variables' => [
        'default_value' => '',
      ],
    ],
    'druki_official_user_guide' => [
      'variables' => [],
      'file' => $file,
    ],
    'druki_download' => [
      'variables' => [],
    ],
    'druki_wiki' => [
      'variables' => [],
      'file' => $file,
    ],
    'druki_dark_mode_toggle' => [
      'variables' => [],
    ],
    'druki_frontpage_download' => [
      'variables' => [],
    ],
    'druki_photoswipe_responsive_image' => [
      'variables' => [
        'uri' => NULL,
        'alt' => NULL,
        'responsive_image_style_id' => NULL,
        'photoswipe_image_style_id' => NULL,
      ],
      'file' => $file,
    ],
    'druki_search_results' => [
      'variables' => [
        'results' => [],
      ],
    ],
    'druki_search_result' => [
      'variables' => [
        'link' => NULL,
        'title' => NULL,
        'snippet' => NULL,
        'toc' => NULL,
        'drupal_core' => NULL,
      ],
    ],
    'druki_avatar_placeholder' => [
      'variables' => [
        'initials' => NULL,
        'initials_color' => 'transparent',
        'background_color' => 'transparent',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for 'responsive-image.html.twig'.
 */
function druki_preprocess_responsive_image(array &$variables): void {
  // This hook is also set width and height required by default lazy loading
  // implementation. But this one called after, so with and height is not set
  // at the point when default lazy is added, so we force it.
  // Prioritize source value for it.
  if (!isset($variables['img_element']['#attributes']['loading'])) {
    $variables['img_element']['#attributes']['loading'] = 'lazy';
  }
  $variables['img_element']['#attributes']['decoding'] = 'async';

  // The code below adds 'width' and 'height' for fallback image. This help
  // with CLS problems.
  // @see https://web.dev/cls/
  /** @var \Drupal\responsive_image\ResponsiveImageStyleInterface $responsive_style */
  $responsive_style = ResponsiveImageStyle::load($variables['responsive_image_style_id']);
  if (!$responsive_style) {
    return;
  }

  /** @var \Drupal\Core\Image\ImageFactory $image_factory */
  $image_factory = \Drupal::service('image.factory');
  /** @var \Drupal\image\Entity\ImageStyle $fallback_style */
  $fallback_style = ImageStyle::load($responsive_style->getFallbackImageStyle());
  if (!$fallback_style) {
    return;
  }
  $fallback_image = $fallback_style->buildUri($variables['uri']);
  $image_factory->get($fallback_image);
  $variables['img_element']['#attributes']['width'] = $image_factory->get($fallback_image)->getWidth();
  $variables['img_element']['#attributes']['height'] = $image_factory->get($fallback_image)->getHeight();
}

/**
 * Implements hook_preprocess_HOOK() for 'image.html.twig'.
 */
function druki_preprocess_image(array &$variables): void {
  $variables['attributes']['decoding'] = 'async';
}

/**
 * Implements hook_entity_base_field_info().
 */
function druki_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  if ($entity_type->id() === 'file') {
    // Add field for store file hash.
    $fields['druki_file_hash'] = BaseFieldDefinition::create('string')
      ->setLabel(t('File hash'))
      ->setDescription(t('The file md5 hash.'))
      ->setSetting('max_length', 255);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function druki_file_presave(EntityInterface $entity): void {
  /** @var \Drupal\druki\File\FileTrackerInterface $file_tracker */
  $file_tracker = \Drupal::service('druki.file_tracker');

  try {
    $file_tracker->track($entity);
  }
  catch (Exception $e) {
    \Drupal::service('logger.channel.druki')
      ->error('Problems with file hash creation. File ID: @fid.', [
        '@fid' => $entity->id(),
      ]);
  }
}
