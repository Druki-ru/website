<?php

/**
 * @file
 * Main file for installation on update hooks.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\druki_content\Entity\DrukiContentInterface;
use Drupal\druki_content\Event\RequestSourceContentSyncEvent;
use Drupal\entity\BundleFieldDefinition;

/**
 * Implements hook_requirements().
 */
function druki_content_requirements(string $phase): array {
  $requirements = [];

  if ($phase == 'install') {
    if (!class_exists('Symfony\Component\DomCrawler\Crawler')) {
      $requirements['druki_parser_status'] = [
        'title' => 'Druki Content Sync',
        'value' => t('The required dependency @dependency is missing. Install it and try again.', ['@dependency' => 'symfony/dom-crawler']),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    if (!class_exists('Symfony\Component\Finder\Finder')) {
      $requirements['druki_parser_status'] = [
        'title' => 'Druki Content Sync',
        'value' => t('The required dependency @dependency is missing. Install it and try again.', ['@dependency' => 'symfony/finder']),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function druki_content_install(bool $is_syncing): void {
  /** @var \Drupal\druki_content\Repository\ContentWebhookSettingsInterface $webhook_settings */
  $webhook_settings = \Drupal::service('druki_content.repository.content_webhook_settings');
  $webhook_settings->setContentUpdateWebhookAccessKey(Crypt::randomBytesBase64(55));
}

/**
 * Implements hook_uninstall().
 */
function druki_content_uninstall(): void {
  // Remove state settings.
  \Drupal::keyValue('druki_content.webhook_settings')->deleteAll();
}

/**
 * Move two base entity fields to configuration fields.
 *
 * If you are looking at this hook update for learning purposes, don't forget,
 * you also must remove base field definition from the entity object codebase,
 * before executing this hook.
 *
 * For less complex example see
 * comment_post_update_enable_comment_admin_view().
 */
function druki_content_update_8601(array &$sandbox): string {
  $module_handler = \Drupal::moduleHandler();
  $druki_content_module = $module_handler->getModule('druki_content');
  $config_install_path = $druki_content_module->getPath() . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_manager = \Drupal::entityTypeManager();
  // Load config folder.
  $storage = new FileStorage($config_install_path);

  $forced_path_field = $definition_update_manager
    ->getFieldStorageDefinition('forced_path', 'druki_content');
  if ($forced_path_field) {
    // Uninstall "forced_path" base field.
    $definition_update_manager->uninstallFieldStorageDefinition($forced_path_field);

    // Install "forced_path" field.
    // Install storage.
    $entity_type_manager
      ->getStorage('field_storage_config')
      ->create($storage->read('field.storage.druki_content.forced_path'))
      ->save();

    // Install field.
    $entity_type_manager
      ->getStorage('field_config')
      ->create($storage->read('field.field.druki_content.druki_content.forced_path'))
      ->save();
  }

  $category_field = $definition_update_manager
    ->getFieldStorageDefinition('category', 'druki_content');
  if ($category_field) {
    // Uninstall "category" base field.
    $definition_update_manager->uninstallFieldStorageDefinition($category_field);

    // Install "category" field.
    // Install storage.
    $entity_type_manager
      ->getStorage('field_storage_config')
      ->create($storage->read('field.storage.druki_content.category'))
      ->save();

    // Install field.
    $entity_type_manager
      ->getStorage('field_config')
      ->create($storage->read('field.field.druki_content.druki_content.category'))
      ->save();
  }

  // Restore previous values.
  // Make sure you call it after fields are changed, because database structure
  // will be changed during process above.
  /** @var \Drupal\Core\Entity\Sql\SqlContentEntityStorage $druki_content_storage */
  $druki_content_storage = $entity_type_manager->getStorage('druki_content');
  /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
  $table_mapping = $druki_content_storage->getTableMapping();
  $database = \Drupal::database();

  // Restore "forced_path" values.
  if ($forced_path_field) {
    $forced_path_deleted_data_table = $table_mapping->getDedicatedDataTableName($forced_path_field, TRUE);
    $results = $database->select($forced_path_deleted_data_table, 'dd')
      ->fields('dd')
      ->execute()
      ->fetchAll();

    foreach ($results as $result) {
      $druki_content = $druki_content_storage->load($result->entity_id);

      if ($druki_content instanceof DrukiContentInterface) {
        $druki_content->set('forced_path', $result->forced_path_value);
        $druki_content->save();
      }
    }
  }

  // Restore "category" values.
  if ($category_field) {
    $category_field_deleted_data_table = $table_mapping->getDedicatedDataTableName($category_field, TRUE);
    $results = $database->select($category_field_deleted_data_table, 'dd')
      ->fields('dd')
      ->execute()
      ->fetchAll();

    foreach ($results as $result) {
      $druki_content = $druki_content_storage->load($result->entity_id);

      if ($druki_content instanceof DrukiContentInterface) {
        $druki_content->set('category', [
          'area' => $result->category_area,
          'order' => $result->category_order,
          'title' => $result->category_title,
        ]);
        $druki_content->save();
      }
    }
  }

  return t('Both base fields moved into configs.');
}

/**
 * Adds metatag field to druki_content.
 */
function druki_content_update_8602(array &$sandbox): string {
  $module_handler = \Drupal::moduleHandler();
  $druki_content_module = $module_handler->getModule('druki_content');
  $config_install_path = $druki_content_module->getPath() . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY;
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type_manager = \Drupal::entityTypeManager();
  // Load config folder.
  $storage = new FileStorage($config_install_path);

  $metatags_field = $definition_update_manager
    ->getFieldStorageDefinition('metatags', 'druki_content');
  if (!$metatags_field) {
    // Install storage.
    $entity_type_manager
      ->getStorage('field_storage_config')
      ->create($storage->read('field.storage.druki_content.metatags'))
      ->save();

    // Install field.
    $entity_type_manager
      ->getStorage('field_config')
      ->create($storage->read('field.field.druki_content.druki_content.metatags'))
      ->save();

    return t('The metatag field was installed.');
  }
  else {
    return t('The metatag field is found on druki_content entity. The update is skipped.');
  }
}

/**
 * Migrate druki_content_sync state value to druki_content.
 */
function druki_content_update_8801(array &$sandbox): string {
  $state = \Drupal::state();
  $value = $state->get('druki_content_sync.settings.force_update', FALSE);
  $state->delete('druki_content_sync.settings.force_update');
  $state->set('druki_content.settings.force_update', $value);

  return new TranslatableMarkup('Sync settings was migrated.');
}

/**
 * Update run by fault. =)
 */
function druki_content_update_8802(array &$sandbox): void {
  // This update was run accidentally so it's just has it reserve.
}

/**
 * Removes "filename" field from druki_content entity.
 *
 * @see https://gitlab.com/druki/website/issues/88
 */
function druki_content_update_8803(array &$sandbox): void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($filename_definition = $definition_update_manager->getFieldStorageDefinition('filename', 'druki_content')) {
    $definition_update_manager->uninstallFieldStorageDefinition($filename_definition);
  }
}

/**
 * Adds new base field "sync_timestamp" to druki_content entity.
 *
 * @see https://gitlab.com/druki/website/issues/88
 */
function druki_content_update_8804(array &$sandbox): void {
  $field_storage_definition = BaseFieldDefinition::create('timestamp')
    ->setLabel(new TranslatableMarkup('Last synchronization timestamp'))
    ->setDescription(new TranslatableMarkup('The time of last synchronization where this content was presented.'))
    ->setDisplayOptions('form', [
      'region' => 'hidden',
      'weight' => 0,
    ])
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('sync_timestamp', 'druki_content', 'druki_content', $field_storage_definition);
}

/**
 * Removes "last_commit_id" field for druki_content entity.
 *
 * @see https://gitlab.com/druki/website/issues/88
 */
function druki_content_update_8805(array &$sandbox): void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($last_commit_id_definition = $definition_update_manager->getFieldStorageDefinition('last_commit_id', 'druki_content')) {
    $definition_update_manager->uninstallFieldStorageDefinition($last_commit_id_definition);
  }
}

/**
 * Removes "contribution_statistics" field from druki_content entity.
 *
 * @see https://gitlab.com/druki/website/issues/88
 */
function druki_content_update_8806(array &$sandbox): void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($contribution_statistics_definition = $definition_update_manager->getFieldStorageDefinition('contribution_statistics', 'druki_content')) {
    $definition_update_manager->uninstallFieldStorageDefinition($contribution_statistics_definition);
  }
}

/**
 * Adds new "source_hash" field for druki_content entity.
 *
 * @see https://gitlab.com/druki/website/issues/88
 */
function druki_content_update_8807(array &$sandbox): void {
  $field_storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('Source content hash'))
    ->setDescription(new TranslatableMarkup('Store the last parsed content hash used for current content.'))
    ->setRequired(FALSE)
    ->setSetting('max_length', 255)
    ->setReadOnly(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('source_hash', 'druki_content', 'druki_content', $field_storage_definition);
}

/**
 * Fix all missing entity updates.
 */
function druki_content_update_9001(array &$sandbox): void {
  // Without this changes
  // system_post_update_entity_revision_metadata_bc_cleanup() will not apply.
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  // Fix handlers.
  $druki_content_definition->setHandlerClass('storage', 'Drupal\druki_content\Entity\Handler\DrukiContentStorage');
  $druki_content_definition->setHandlerClass('list_builder', 'Drupal\druki_content\Entity\Handler\DrukiContentListBuilder');
  $druki_content_definition->setHandlerClass('access', 'Drupal\druki_content\Entity\Handler\DrukiContentAccessControlHandler');
  $druki_content_definition->setHandlerClass('redirect_controller', 'Drupal\druki_content\Entity\Handler\DrukiContentRedirectController');
  // Fix links.
  $druki_content_definition->setLinkTemplate('edit-remote', '/druki_content/{druki_content}/edit-remote');
  $druki_content_definition->setLinkTemplate('history-remote', '/druki_content/{druki_content}/history-remote');

  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change Druki Content route provider handler namespace.
 */
function druki_content_update_9002(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('route_provider', [
    'html' => 'Drupal\druki_content\Entity\Handler\RouteProvider\DrukiContentHtmlRouteProvider',
  ]);
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Update Druki Content handler namespaces.
 */
function druki_content_update_9003(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('access', 'Drupal\druki_content\Entity\Handler\Access\DrukiContentAccessControlHandler');
  $druki_content_definition->setHandlerClass('list_builder', 'Drupal\druki_content\Entity\Handler\ListBuilder\DrukiContentListBuilder');
  $druki_content_definition->setHandlerClass('redirect_controller', 'Drupal\druki_content\Entity\Handler\RouteProvider\DrukiContentRedirectController');
  $druki_content_definition->setHandlerClass('storage', 'Drupal\druki_content\Entity\Handler\Storage\DrukiContentStorage');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Update Druki Content form handlers.
 */
function druki_content_update_9004(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  // Form handlers at this point is not set to entity schema properly.
  $form_handlers = [
    'edit' => 'Drupal\druki_content\Entity\Handler\Form\DrukiContentForm',
    'delete' => 'Drupal\Core\Entity\ContentEntityDeleteForm',
    'delete-all' => 'Drupal\druki_content\Entity\Handler\Form\DrukiContentDeleteAllForm',
    'settings' => 'Drupal\druki_content\Entity\Handler\Form\DrukiContentSettingsForm',
    'sync' => 'Drupal\druki_content\Entity\Handler\Form\DrukiContentSyncForm',
  ];
  $druki_content_definition->setHandlerClass('form', $form_handlers);
  // Set new link templates.
  $druki_content_definition->setLinkTemplate('delete-all-form', '/admin/druki/content/delete-all');
  $druki_content_definition->setLinkTemplate('settings', '/admin/structure/druki-content');
  $druki_content_definition->setLinkTemplate('sync', '/admin/structure/druki-content/sync');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Install 'druki_content_redirect' field.
 */
function druki_content_update_9101(array &$sandbox): void {
  // @codingStandardsIgnoreStart
  // $field_definition = druki_content_redirect_druki_content_redirect_base_field();
  // \Drupal::entityDefinitionUpdateManager()
  //   ->installFieldStorageDefinition('druki_content_redirect', 'redirect', 'druki_content', $field_definition);
  // @codingStandardsIgnoreEnd
}

/**
 * Uninstall druki_content 'external_id' field.
 */
function druki_content_update_9102(array &$sandbox): void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($external_id = $definition_update_manager->getFieldStorageDefinition('external_id', 'druki_content')) {
    $definition_update_manager->uninstallFieldStorageDefinition($external_id);
  }
}

/**
 * Install new content field 'slug'.
 */
function druki_content_update_9103(array &$sandbox): void {
  $field_definition = BaseFieldDefinition::create('string')
    ->setLabel(new TranslatableMarkup('The content slug'))
    ->setRequired(TRUE)
    ->setReadOnly(TRUE);
  Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('slug', 'druki_content', 'druki_content', $field_definition);
}

/**
 * Change druki_content Access handlers location.
 */
function druki_content_update_9201(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('access', 'Drupal\druki_content\Access\DrukiContentAccessControlHandler');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change druki_content form handlers location.
 */
function druki_content_update_9202(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $form_handlers = [
    'edit' => 'Drupal\druki_content\Form\DrukiContentForm',
    'delete' => 'Drupal\Core\Entity\ContentEntityDeleteForm',
    'delete-all' => 'Drupal\druki_content\Form\DrukiContentDeleteAllForm',
    'settings' => 'Drupal\druki_content\Form\DrukiContentSettingsForm',
    'sync' => 'Drupal\druki_content\Form\DrukiContentSyncForm',
  ];
  $druki_content_definition->setHandlerClass('form', $form_handlers);
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change druki_content list_builder handler location.
 */
function druki_content_update_9203(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('list_builder', 'Drupal\druki_content\Controller\DrukiContentListBuilder');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change druki_content route_provider handler location.
 */
function druki_content_update_9204(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $route_providers = [
    'html' => 'Drupal\druki_content\Routing\DrukiContentHtmlRouteProvider',
  ];
  $druki_content_definition->setHandlerClass('route_provider', $route_providers);
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change druki_content redirect_controller handler location.
 */
function druki_content_update_9205(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('redirect_controller', 'Drupal\druki_content\Routing\DrukiContentRedirectController');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change druki_content storage handler location.
 */
function druki_content_update_9206(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('storage', 'Drupal\druki_content\Storage\DrukiContentStorage');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Change druki_content storage handler location.
 */
function druki_content_update_9207(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setHandlerClass('storage', 'Drupal\druki_content\Repository\DrukiContentStorage');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Install entity module required for 'druki_content_update_9209'.
 */
function druki_content_update_9208(array &$sandbox): void {
  \Drupal::service('module_installer')->install(['entity']);
}

/**
 * Adds new "document" field for druki_content entity.
 */
function druki_content_update_9209(array &$sandbox): void {
  $field_storage_definition = BundleFieldDefinition::create('druki_content_document')
    ->setLabel(new TranslatableMarkup('The content document.'))
    ->setRequired(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('document', 'druki_content', 'druki_content', $field_storage_definition);
}

/**
 * Make document field view configurable.
 */
function druki_content_update_9210(array &$sandbox): void {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_storage_definition = $entity_definition_update_manager->getFieldStorageDefinition('document', 'druki_content');
  $field_storage_definition->setDisplayOptions('view', [
    'label' => 'hidden',
    'type' => 'string',
    'weight' => -4,
  ])
    ->setDisplayConfigurable('view', TRUE);

  $entity_definition_update_manager->updateFieldStorageDefinition($field_storage_definition);
}

/**
 * Delete paragraph entities.
 */
function druki_content_update_9211(array &$sandbox): string {
  /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $paragraph_storage */
  $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
  if (!isset($sandbox['progress'])) {
    $sandbox['total'] = $paragraph_storage->getQuery()
      ->accessCheck(FALSE)
      ->count()
      ->execute();
    $sandbox['progress'] = 0;
  }

  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
    return (string) new TranslatableMarkup('No paragraphs found, skip.');
  }

  $step_size = Settings::get('entity_update_batch_size', 50);
  $paragraph_ids = $paragraph_storage->getQuery()
    ->accessCheck(FALSE)
    ->range(0, $step_size)
    ->execute();
  $paragraphs = $paragraph_storage->loadMultiple($paragraph_ids);
  $paragraph_storage->delete($paragraphs);
  $sandbox['progress'] += \count($paragraph_ids);

  $sandbox['#finished'] = $sandbox['progress'] / $sandbox['total'];

  return (string) new PluralTranslatableMarkup(
    $sandbox['progress'],
    '@count paragraph has been deleted.',
    '@count paragraphs has been deleted.',
  );
}

/**
 * Delete unused state value.
 */
function druki_content_update_9212(array &$sandbox): string {
  \Drupal::state()->delete('druki_content.last_sync_timestamp');
  return (string) new TranslatableMarkup('Deleted last sync timestamp state value.');
}

/**
 * Removes "sync_timestamp" field from druki_content entity.
 */
function druki_content_update_9213(array &$sandbox): string {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($filename_definition = $definition_update_manager->getFieldStorageDefinition('sync_timestamp', 'druki_content')) {
    $definition_update_manager->uninstallFieldStorageDefinition($filename_definition);
  }
  return (string) new TranslatableMarkup("Deleted 'sync_timestamp' field from druki_content entity.");
}

/**
 * Rebuild content.
 */
function druki_content_update_9214(array &$sandbox): string {
  $git_settings = \Drupal::service('druki_git.settings');
  \Drupal::service('druki_content.queue.content_sync_manager')
    ->buildFromPath($git_settings->getRepositoryPath());
  return (string) new TranslatableMarkup('Content marked for rebuild.');
}

/**
 * Uninstall redirect 'druki_content_redirect' field.
 */
function druki_content_update_9215(array &$sandbox): void {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($external_id = $definition_update_manager->getFieldStorageDefinition('druki_content_redirect', 'redirect')) {
    $definition_update_manager->uninstallFieldStorageDefinition($external_id);
  }
}

/**
 * Move source settings from 'druki_git' to 'druki_content' settings.
 */
function druki_content_update_9216(array &$sandbox): string {
  $config_factory = Drupal::service('config.factory');
  $old_settings = $config_factory->get('druki_git.git_settings');
  $new_settings = $config_factory->getEditable('druki_content.content_source_settings');
  $new_settings->set('repository_uri', $old_settings->get('repository_path'));
  $new_settings->set('repository_url', $old_settings->get('repository_url'));
  $new_settings->save();
  return (string) new TranslatableMarkup('The content source settings successfully migrated.');
}

/**
 * Move webhook access key from 'druki_git' to 'druki_content' settings.
 */
function druki_content_update_9217(array &$sandbox): string {
  $access_key = \Drupal::state()->get('druki_git.webhook_key');
  \Drupal::keyValue('druki_content.webhook_settings')
    ->set('content_update_access_key', $access_key);
  return (string) new TranslatableMarkup('The webhook access key successfully migrated.');
}

/**
 * Change sync form handler.
 */
function druki_content_update_9218(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setFormClass('sync', 'Drupal\druki_content\Form\ContentSyncForm');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Update content entity sync link template.
 */
function druki_content_update_9219(array &$sandbox): void {
  /** @var \Drupal\Core\Entity\EntityLastInstalledSchemaRepositoryInterface $last_installed_schema_repository */
  $last_installed_schema_repository = \Drupal::service('entity.last_installed_schema.repository');
  $druki_content_definition = $last_installed_schema_repository->getLastInstalledDefinition('druki_content');
  $druki_content_definition->setLinkTemplate('sync', '/admin/druki/content/sync');
  $last_installed_schema_repository->setLastInstalledDefinition($druki_content_definition);
}

/**
 * Delete outdated setting.
 */
function druki_content_update_9220(array &$sandbox): void {
  \Drupal::state()->delete('druki_content.settings.force_update');
}

/**
 * Delete all content to update it with the new slugs and path aliases.
 */
function druki_content_update_9300(array &$sandbox): void {
  $content_storage = \Drupal::entityTypeManager()->getStorage('druki_content');
  $entities = $content_storage->loadMultiple();
  $content_storage->delete($entities);
}

/**
 * Install 'contributors' field for druki_content entity.
 */
function druki_content_update_9301(array &$sandbox): void {
  $field_storage_definition = BaseFieldDefinition::create('druki_contributor')
    ->setLabel(new TranslatableMarkup('The content contributors.'))
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('contributors', 'druki_content', 'druki_content', $field_storage_definition);
}

/**
 * Added entity bundle field and update entity schema.
 */
function druki_content_update_9302(array &$sandbox): void {
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $bundle_label = new TranslatableMarkup('Druki content bundle');
  $bundle_field_name = 'type';

  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel($bundle_label)
    ->setRequired(TRUE)
    ->setReadOnly(TRUE);
  $update_manager->installFieldStorageDefinition($bundle_field_name, 'druki_content', 'druki_content', $storage_definition);
  $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('druki_content');

  /** @var \Drupal\Core\Entity\ContentEntityTypeInterface $entity_type */
  $entity_type = $update_manager->getEntityType('druki_content');
  $entity_keys = $entity_type->getKeys();
  $entity_keys['bundle'] = $bundle_field_name;
  $entity_type->set('entity_keys', $entity_keys);
  $entity_type->set('bundle_plugin_type', 'druki_content_bundle');
  $entity_type->set('bundle_label', $bundle_label);
  $update_manager->updateFieldableEntityType($entity_type, $field_storage_definitions);
}
