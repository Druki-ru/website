name: Tests

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ develop ]

env:
  COMPOSER_FLAGS: '--ansi --no-interaction --no-progress --no-suggest --prefer-dist'

jobs:
  phpcs:
    name: 'PHPCS'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version:
          - '7.3'
          - '7.4'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'

      - name: 'Install PHP'
        uses: 'shivammathur/setup-php@v2'
        with:
          coverage: 'none'
          extensions: 'intl, zip, intl, zip, date, dom, filter, gd, hash, json, pcre, pdf, session, simplexml, spl, tokenizer, xml'
          ini-values: 'memory_limit=-1'
          php-version: ${{ matrix.php-version }}

      - name: 'Determine composer cache directory'
        id: 'determine-composer-cache-directory'
        run: echo "::set-output name=directory::$(composer config cache-dir)"

      - name: 'Cache dependencies installed with composer'
        uses: 'actions/cache@v2'
        with:
          path: ${{ steps.determine-composer-cache-directory.outputs.directory }}
          key: php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: php-${{ matrix.php-version }}

      - name: 'Install Composer dependencies'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install $COMPOSER_FLAGS

      - name: 'PHPCS Analyse'
        run: vendor/bin/phpcs

  phpstan:
    name: 'PHPStan'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version:
          - '7.3'
          - '7.4'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'

      - name: 'Install PHP'
        uses: 'shivammathur/setup-php@v2'
        with:
          coverage: 'none'
          extensions: 'intl, zip, intl, zip, date, dom, filter, gd, hash, json, pcre, pdf, session, simplexml, spl, tokenizer, xml'
          ini-values: 'memory_limit=-1'
          php-version: ${{ matrix.php-version }}

      - name: 'Determine composer cache directory'
        id: 'determine-composer-cache-directory'
        run: echo "::set-output name=directory::$(composer config cache-dir)"

      - name: 'Cache dependencies installed with composer'
        uses: 'actions/cache@v2'
        with:
          path: ${{ steps.determine-composer-cache-directory.outputs.directory }}
          key: php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: php-${{ matrix.php-version }}

      - name: 'Install Composer dependencies'
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install $COMPOSER_FLAGS

      - name: 'PHPStan Analyse'
        run: vendor/bin/phpstan analyse --configuration=phpstan.neon

#  @see https://github.com/Druki-ru/website/issues/37
  phpunit:
    name: 'PHPUnit'
    runs-on: ubuntu-latest
    needs:
      - phpstan
      - phpcs
    steps:
      - name: 'Test ID'
        run: id

      - name: 'Checkout'
        uses: 'actions/checkout@v2'

      - name: 'Permissions'
        run: ls -ln

      - name: 'Copy files for environment'
        run: |
          cp ./.github/workflows/d4d-phpunit/.env ./.env
          cp ./.github/workflows/d4d-phpunit/docker-compose.yml ./docker-compose.yml
          cp ./.github/workflows/d4d-phpunit/Makefile ./Makefile
          cp ./.github/workflows/d4d-phpunit/settings.php ./web/sites/default/settings.php

      - name: 'Run docker'
        run: docker-compose up -d

      - name: 'Test ID'
        run: id

#      - name: 'Configure Composer'
#        run: 'make composer --global config gitlab-token.gitlab.com ${{ secrets.ci_gitlab_token }}'

      - name: 'Install site dependencies'
        run: "docker-compose exec -T php composer install"

      - name: 'Install website'
        run: 'make drush site:install druki_installer'

      - name: 'Run tests'
        run: 'make composer run-script phpunit'
